/*
Sudoku
Problem Description
Write a program to solve a Sudoku puzzle by filling the empty cells. Empty cells are indicated by the character '.' You may assume that there will be only one unique solution.

Problem Constraints
N = 9


Input Format
First argument is an array of array of characters representing the Sudoku puzzle.


Output Format
Modify the given input to the required answer.


Example Input
Input 1:

A = [[53..7....], [6..195...], [.98....6.], [8...6...3], [4..8.3..1], [7...2...6], [.6....28.], [...419..5], [....8..79]]


Example Output
Output 1:

[[534678912], [672195348], [198342567], [859761423], [426853791], [713924856], [961537284], [287419635], [345286179]]


Example Explanation
Explanation 1:

Look at the diagrams given in the question.

BruteForce:
  Approach: The naive approach is to generate all possible configurations of numbers from 1 to 9 to fill the empty cells. Try every configuration one by one until the correct configuration is found, i.e. for every unassigned position fill the position with a number from 1 to 9. After filling all the unassigned position check if the matrix is safe or not. If safe print else recurs for other cases.
  Time Complexity: O(9^(n*n)). 
  Space Complexity: O(n*n). 

Optimization: Backtracking
Approach:
there are 3 Rules:
  1. unique number in each row
  2. unique number in each col
  3. unique numbers in each grid there are 3x3 grids
  
  using helper class to place the numbers from 1 to 9
  helper(): // going row wise
  if row is equal to length return true means we have filled entier board successfully
  create 2 variable new row --> nrow
                    new col --> ncol
         we will bw incrementing col till we reach the end that is
         if(col == A.length-1) then we go to next row rest ncol to 0 and nrow = row+1;
         else keep incrementing ncol = col+1 and nrow as row the same row apparently 
         placing numbers from 1 to 9 in each cell
         check if there is a number if there is already a number then skip
         if there is . that means empty cell then place the number 
         before that check if it is safe to place the number
         then go to next row if helper returns true then true
                              else backtrack to '.'
            IsSafe:
                check if it safe to place in row: check in that row for each col does the number which we are insering exists
                check if is safe to place in col: check in that col for each row does the number which we are insering exists
                check if it safe to place in grid: check for each grid that is 3x3 grids in total
                          get the start cell of each grid
                          startrow = 3 * row/3
                          startcol = 3 * col/3
                          for loop start row to start row  +3 (i=sr; i<sr+3)
                          for loop start col to start col + 3 (i=rc; i<sc+3)
                          check if(A[i][j] == (char)(numb +'0'))
  Note: since we are using char array we need to type cast int to char to do this:
      (char)(number + '0') --> this will convert int to char
      
Time complexity: O(9^(n*n)). 
For every unassigned index, there are 9 possible options so the time complexity is O(9^(n*n)).
The time complexity remains the same but there will be some early pruning so the time taken will be much less than the naive algorithm
but the upper bound time complexity remains the same.

Space Complexity: O(n*n). 
To store the output array a matrix is needed.
*/

import java.util.*;

public class Solution {
	public void solveSudoku(char[][] A) {
        helper(A,0,0);
	} 
     public boolean IsSafe(char[][] A, int row, int col , int numb){
        //row and col
        for(int i=0; i<A.length; i++){
            if(A[i][col] == (char)(numb +'0')){//col
                return false;
            }
        }
        for(int j=0;j<A.length;j++){
            if(A[row][j] == (char)(numb +'0')){//row
                return false;
            }  
        }  
        int sr =3*(row/3); 
        int sc =3*(col/3);

        //grid
        for(int i=sr; i<sr+3; i++){
            for(int j=sc; j<sc+3; j++){
                if(A[i][j] == (char)(numb +'0'))
                    return false;
            }
        }
         return true;
    }
    public boolean helper(char[][] A, int row, int col){
        // going row wise
        if(row == A.length){
            return true;
        }
        int nCol =0;
        int nRow = 0;

        if(col != A.length-1){
            nRow = row;
            nCol = col+1; 
        }
        else{ 
            nRow = row+1;
            nCol = 0;
        }

        if(A[row][col] != '.'){// if there is already a number 
            if(helper(A, nRow, nCol))
                return true;
        }
        else{
            for(int i=1; i<=9; i++){
                if(IsSafe(A, row, col, i)){
                    A[row][col] = (char)( i + '0');
                    if(helper(A, nRow, nCol)){
                        return true;
                    }
                    else{
                        //backtrack 
                        A[row][col] = '.';
                    } 
                }
            }
        }
        return false;
    }

     
}
